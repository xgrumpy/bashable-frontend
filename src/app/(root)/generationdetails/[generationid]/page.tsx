import { Metadata, ResolvingMetadata } from "next";
import DetailsView from "./componenets/DetailsView";
import axiosReq from "@/utils/axios";
import { IImageData } from "@/interfaces/general";

type Props = {
    params: { generationid: string };
};

export async function generateMetadata(
    { params }: Props,
    // @ts-ignore
    parent: ResolvingMetadata
): Promise<Metadata> {
    try {
        const generationid = params.generationid;
        const generationRes = await axiosReq.get(
            `/public/generations/${generationid}`
        );
        const generation = generationRes.data;

        const previousImages = (await parent).openGraph?.images || [];

        return {
            title: `Bashable.art - Image generated By ${generation.username}`,
            description: generation.prompt,
            openGraph: {
                title: `Bashable.art - Image generated By ${generation.username}`,
                description: generation.prompt,
                url: `${process.env.NEXT_PUBLIC_SITE_URL}/generationdetails/${generation.id}`,
                images: [
                    {
                        url: generation.image,
                        width: generation.width,
                        height: generation.height,
                        alt: generation.prompt,
                    },
                    ...previousImages,
                ],
            },
        };
    } catch (error) {
        console.log(error);
        return {};
    }
}

const GenerationDetails = ({ params }: any) => {
    const { generationid } = params;

    return <DetailsView generationid={generationid} />;
};

export default GenerationDetails;
